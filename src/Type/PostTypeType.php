<?php
namespace BEForever\WPGraphQL\Type;

use BEForever\WPGraphQL\AppContext;
use BEForever\WPGraphQL\Data\User;
use BEForever\WPGraphQL\TypeSystem;
use GraphQL\Type\Definition\ObjectType;
use GraphQL\Type\Definition\ResolveInfo;

class PostTypeType extends BaseType {
	public function __construct( TypeSystem $types ) {
		$this->definition = new ObjectType([
			'name' => 'PostType',
			'fields' => function() use ( $types ) {
				return array(
					'name'            => array(
						'type'        => $types->string(),
						'description' => esc_html__( 'The internal name of the post type. This should not be used for display purposes.', 'wp-graphql' ),
					),
					'label'           => array(
						'type'        => $types->string(),
						'description' => esc_html__( 'Display name of the content type.', 'wp-graphql' ),
					),
					//'labels' => $types->post_type_labels(),
					'description'     => array(
						'type'        => $types->string(),
						'description' => esc_html__( 'Description of the content type.', 'wp-graphql' ),
					),
					'public'          => array(
						'type'        => $types->boolean(),
						'description' => esc_html__( 'Whether a post type is intended for use publicly either via the admin interface or by front-end users. While the default settings of exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are inherited from public, each does not rely on this relationship and controls a very specific intention.', 'wp-graphql' ),
					),
					'hierarchical'    => array(
						'type'        => $types->boolean(),
						'description' => esc_html__( 'Whether the post type is hierarchical, for example pages.', 'wp-graphql' ),
					),
					'exclude_from_search' => array(
						'type'            => $types->boolean(),
						'description'     => esc_html__( 'Whether to exclude posts with this post type from front end search results.', 'wp-graphql' ),
					),
					'publicly_queryable'  => array(
						'type'            => $types->boolean(),
						'description'     => esc_html__( 'Whether queries can be performed on the front end for the post type as part of parse_request(). Endpoints would include: \n* ?post_type={post_type_key}\n* ?{post_type_key}={single_post_slug}\n* ?{post_type_query_var}={single_post_slug}', 'wp-graphql' ),
					),
					'show_ui'             => array(
						'type'            => $types->boolean(),
						'description'     => esc_html__( 'Whether to generate and allow a UI for managing this post type in the admin.', 'wp-graphql' ),
					),
					'show_in_menu'        => array(
						'type'            => $types->boolean(),
						'description'     => esc_html__( 'Where to show the post type in the admin menu. To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is shown. If a string of an existing top level menu (eg. "tools.php" or "edit.php?post_type=page"), the post type will be placed as a sub-menu of that.', 'wp-graphql' ),
					),
					'show_in_nav_menus'   => array(
						'type'            => $types->boolean(),
						'description'     => esc_html__( 'Makes this post type available for selection in navigation menus.', 'wp-graphql' ),
					),
					'show_in_admin_bar'   => array(
						'type'            => $types->boolean(),
						'description'     => esc_html__( 'Makes this post type available via the admin bar.', 'wp-graphql' ),
					),
					'menu_position'       => array(
						'type'            => $types->int(),
						'description'     => esc_html__( 'The position of this post type in the menu. Only applies if show_in_menu is true.', 'wp-graphql' ),
					),
					'menu_icon'           => array(
						'type'            => $types->string(),
						'description'     => esc_html__( 'The name of the icon file to display as a menu icon.', 'wp-graphql' ),
					),
					'taxonomies'          => array(
						'type'            => $types->listOf( $types->string() ),
						'description'     => esc_html__( 'List of taxonomies available to the post type.', 'wp-graphql' ),
					),
					'has_archive'         => array(
						'type'            => $types->boolean(),
						'description'     => esc_html__( 'Whether this content type should have archives. Content archives are generated by type and by date.', 'wp-graphql' ),
					),
					'can_export'          => array(
						'type'            => $types->boolean(),
						'description'     => esc_html__( 'Whether this content type should can be exported.', 'wp-graphql' ),
					),
					'delete_with_user'    => array(
						'type'            => $types->boolean(),
						'description'     => esc_html__( 'Whether delete this type of content when the author of it is deleted from the system.', 'wp-graphql' ),
					),
					'show_in_rest'        => array(
						'type'            => $types->boolean(),
						'description'     => esc_html__( 'Whether to add the post type route in the REST API `wp/v2` namespace.', 'wp-graphql' ),
					),
					'rest_base'           => array(
						'type'            => $types->string(),
						'description'     => esc_html__( 'Name of content type to diplay in REST API `wp/v2` namespace.', 'wp-graphql' ),
					),
					'rest_controller_class' => array(
						'type'              => $types->string(),
						'description'       => esc_html__( 'The REST Controller class assigned to handling this content type.', 'wp-graphql' ),
					),
				);
			},
			'description' => esc_html__( 'Post types are used to define different types of content in WordPress. Pages are a post type as well as posts themselves. Custom post types are often used in WordPress to present different types of content. It is advised to potentially store custom content types in custom database tables if they do not map well to `wp_posts`.', 'wp-graphql' ),
			'resolveField' => function( $value, $args, $context, ResolveInfo $info ) {
				if ( method_exists( $this, $info->fieldName ) ) {
					return $this->{$info->fieldName}( $value, $args, $context, $info );
				} else {
					return $value->{$info->fieldName};
				}
			},
		]);
	}
}
